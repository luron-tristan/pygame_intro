https://www.pygame.org/docs/

- Display surface:
  must be unique
  is always visible
- Regular surface:
  flexible amount
  only displayed when connected to the display surface

pygame.Surface((100, 200))
test_surface.fill("Red")
screen.blit(test_surface, (200, 100)) => 0, 0 => top, left

any kind of graphical import is a new surface
last surface added is on top

create text => create an image of the text => place it on the display surface

- rectangles
  precise positioning of surfaces
  basic collisions
  draw images on the screen

pygame.Rect(left, top, width, height)

for event in pygame.event.get():
event.type ==
pygame.MOUSEMOTION
pygame.MOUSEBUTTONDOWN
pygame.MOUSEBUTTONUP

colors: rgb or hex

# if event.type == pygame.MOUSEMOTION and player_rect.collidepoint(event.pos):
#   print("Collision")

# pygame.draw.line(screen, "Gold", (0, 0), (pygame.mouse.get_pos()), 10)
# pygame.draw.line(screen, "Gold", (0, 0), (SCREEN_WIDTH, SCREEN_HEIGHT), 10)
# pygame.draw.ellipse(screen, "Brown", pygame.Rect(50, 200, 100, 100))

# if player_rect.colliderect(snail_rect):
#   print('collision')

# mouse_pos = pygame.mouse.get_pos()
# if player_rect.collidepoint(mouse_pos):
#   print(pygame.mouse.get_pressed())

# keys = pygame.key.get_pressed()
# if keys[pygame.K_SPACE]:
#   print("JUMP")
# better in event loop

Why are there 2 methods to get input ?
classes => want controls inside the class, out of the event loop

user events:
- triggered by user
- or by pygame

=> obstacle
1. create a custom user event
2. tell pygame to trigger that event continuously
3. add code in the event loop

=> obstacles
1. create a list of obstacle rectangles
2. everything the timer triggers we add a new rectangle to that list
3. move every rectangle in that list to the left on every frame
4. delete rectangles too far left

if [] => False